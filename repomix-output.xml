This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
.luacheckrc
app_launch.lua
auto_reload.lua
bing_daily_wallpaper.lua
CHANGELOG.md
init.lua
keybindings_cheatsheet.lua
keybindings_config.lua
LICENSE
README.md
system_manage.lua
utils_lib.lua
website_open.lua
window_lib.lua
window_manipulation.lua
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="LICENSE">
The MIT License (MIT)

Copyright Â© 2022 windvalley

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
</file>

<file path=".gitignore">
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, build with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# system ignore
.DS_Store
Thumbs.db

# go
vendor/
/vendor

# temp ignore
*.log
*.cache
*.diff
*.patch
*.tmp
*debug.test
__debug_bin
/*.xlsx
/*.csv

# Gin bin
gin-bin

# Office Temp Files
~$*

# Coverage Test
coverage

fmtcoverage.html
cover.html

.env
.idea/*
.vscode/*
tmp/
/env
.aider*
</file>

<file path="website_open.lua">
local _M = {}

_M.name = "website_open"
_M.description = "Quickly open target website"

local websites = require "keybindings_config".websites

local log = hs.logger.new("website")

hs.fnutils.each(
    websites,
    function(item)
        hs.hotkey.bind(
            item.prefix,
            item.key,
            item.message,
            function()
                log.d(string.format("open website: %s", item.target))
                hs.urlevent.openURL(item.target)
            end
        )
    end
)

return _M
</file>

<file path="window_lib.lua">
local _M = {}

_M.name = "window_lib"
_M.description = "Window management function library"

-- An integer specifying how many gridparts the screen should be divided into.
-- Defaults to 30.
local gridparts = 30

-- Determine whether the specified screen is vertical
local isVerticalScreen = function(screen)
    if screen:rotate() == 90 or screen:rotate() == 270 then
        return true
    else
        return false
    end
end

-- Move the focused window in the `direction` by on step.
-- Parameters: left, right, up, down
_M.stepMove = function(direction)
    local cwin = hs.window.focusedWindow()
    if cwin then
        local cscreen = cwin:screen()
        local cres = cscreen:fullFrame()
        local stepw = cres.w / gridparts
        local steph = cres.h / gridparts
        local wtopleft = cwin:topLeft()

        if direction == "left" then
            cwin:setTopLeft({x = wtopleft.x - stepw, y = wtopleft.y})
        elseif direction == "right" then
            cwin:setTopLeft({x = wtopleft.x + stepw, y = wtopleft.y})
        elseif direction == "up" then
            cwin:setTopLeft({x = wtopleft.x, y = wtopleft.y - steph})
        elseif direction == "down" then
            cwin:setTopLeft({x = wtopleft.x, y = wtopleft.y + steph})
        end
    else
        hs.alert.show("No focused window!")
    end
end

-- Move and resize the focused window.
-- Parameters:
--   halfleft: left half of screen
--   halfright: right half of screen
--   halfup: upper half of screen
--   halfdown: lower half of screen
--   left_1_3: left or top 1/3
--   right_1_3: right or bottom 1/3
--   left_2_3: left or top 2/3
--   right_2_3: right or bottom 2/3
--   cornerTopLeft: top left corner
--   cornerTopRight: top right corner
--   cornerBottomLeft: bottom left corner
--   cornerBottomRight: bottom right corner
--   max: maximize
--   center: center window with original size
--   stretch: enlarge
--   shrink: shrink
_M.moveAndResize = function(option)
    local cwin = hs.window.focusedWindow()

    if cwin then
        local cscreen = cwin:screen()
        local cres = cscreen:fullFrame()
        local stepw = cres.w / gridparts
        local steph = cres.h / gridparts
        local wf = cwin:frame()

        if option == "halfleft" then
            cwin:setFrame({x = cres.x, y = cres.y, w = cres.w / 2, h = cres.h})
        elseif option == "halfright" then
            cwin:setFrame({x = cres.x + cres.w / 2, y = cres.y, w = cres.w / 2, h = cres.h})
        elseif option == "halfup" then
            cwin:setFrame({x = cres.x, y = cres.y, w = cres.w, h = cres.h / 2})
        elseif option == "halfdown" then
            cwin:setFrame({x = cres.x, y = cres.y + cres.h / 2, w = cres.w, h = cres.h / 2})
        elseif option == "cornerTopLeft" then
            cwin:setFrame({x = cres.x, y = cres.y, w = cres.w / 2, h = cres.h / 2})
        elseif option == "cornerTopRight" then
            cwin:setFrame({x = cres.x + cres.w / 2, y = cres.y, w = cres.w / 2, h = cres.h / 2})
        elseif option == "cornerBottomLeft" then
            cwin:setFrame({x = cres.x, y = cres.y + cres.h / 2, w = cres.w / 2, h = cres.h / 2})
        elseif option == "cornerBottomRight" then
            cwin:setFrame({x = cres.x + cres.w / 2, y = cres.y + cres.h / 2, w = cres.w / 2, h = cres.h / 2})
        elseif option == "max" then
            cwin:setFrame({x = cres.x, y = cres.y, w = cres.w, h = cres.h})
        elseif option == "center" then
            -- cwin:centerOnScreen() centers without changing size,
            -- changed to the following for centering and resizing to proper size.
            cwin:setFrame(
                {
                    x = cres.x + cres.w / 6,
                    y = cres.y + cres.h / 6,
                    w = cres.w / 1.5,
                    h = cres.h / 1.5
                }
            )
        elseif option == "stretch" then
            cwin:setFrame({x = wf.x - stepw, y = wf.y - steph, w = wf.w + (stepw * 2), h = wf.h + (steph * 2)})
        elseif option == "shrink" then
            cwin:setFrame({x = wf.x + stepw, y = wf.y + steph, w = wf.w - (stepw * 2), h = wf.h - (steph * 2)})
        elseif option == "left_1_3" then
            local obj
            if isVerticalScreen(cscreen) then
                obj = {
                    x = cres.x,
                    y = cres.y,
                    w = cres.w,
                    h = cres.h / 3
                }
            else
                obj = {
                    x = cres.x,
                    y = cres.y,
                    w = cres.w / 3,
                    h = cres.h
                }
            end

            cwin:setFrame(obj)
        elseif option == "right_1_3" then
            local obj
            if isVerticalScreen(cscreen) then
                obj = {
                    x = cres.x,
                    y = cres.y + (cres.h / 3 * 2),
                    w = cres.w,
                    h = cres.h / 3
                }
            else
                obj = {
                    x = cres.x + (cres.w / 3 * 2),
                    y = cres.y,
                    w = cres.w / 3,
                    h = cres.h
                }
            end

            cwin:setFrame(obj)
        elseif option == "left_2_3" then
            local obj
            if isVerticalScreen(cscreen) then
                obj = {
                    x = cres.x,
                    y = cres.y,
                    w = cres.w,
                    h = cres.h / 3 * 2
                }
            else
                obj = {
                    x = cres.x,
                    y = cres.y,
                    w = cres.w / 3 * 2,
                    h = cres.h
                }
            end

            cwin:setFrame(obj)
        elseif option == "right_2_3" then
            local obj
            if isVerticalScreen(cscreen) then
                obj = {
                    x = cres.x,
                    y = cres.y + (cres.h / 3),
                    w = cres.w,
                    h = cres.h / 3 * 2
                }
            else
                obj = {
                    x = cres.x + (cres.w / 3),
                    y = cres.y,
                    w = cres.w / 3 * 2,
                    h = cres.h
                }
            end

            cwin:setFrame(obj)
        end
    else
        hs.alert.show("No focused window!")
    end
end

-- Resize the focused window in the `direction` by on step.
-- Parameters: left, right, up, down
_M.directionStepResize = function(direction)
    local cwin = hs.window.focusedWindow()

    if cwin then
        local cscreen = cwin:screen()
        local cres = cscreen:fullFrame()
        local stepw = cres.w / gridparts
        local steph = cres.h / gridparts
        local wsize = cwin:size()

        if direction == "left" then
            cwin:setSize({w = wsize.w - stepw, h = wsize.h})
        elseif direction == "right" then
            cwin:setSize({w = wsize.w + stepw, h = wsize.h})
        elseif direction == "up" then
            cwin:setSize({w = wsize.w, h = wsize.h - steph})
        elseif direction == "down" then
            cwin:setSize({w = wsize.w, h = wsize.h + steph})
        end
    else
        hs.alert.show("No focused window!")
    end
end

-- Move the focused window between all of the screens in the `direction`.
-- Parameters: up, down, left, right, next
_M.moveToScreen = function(direction)
    local cwin = hs.window.focusedWindow()

    if cwin then
        local cscreen = cwin:screen()
        if direction == "up" then
            cwin:moveOneScreenNorth()
        elseif direction == "down" then
            cwin:moveOneScreenSouth()
        elseif direction == "left" then
            cwin:moveOneScreenWest()
        elseif direction == "right" then
            cwin:moveOneScreenEast()
        elseif direction == "next" then
            cwin:moveToScreen(cscreen:next())
        end
    else
        hs.alert.show("No focused window!")
    end
end

-- Minimize all windows.
_M.minimizeAllWindows = function()
    local windows = hs.window.allWindows()

    for _, window in pairs(windows) do
        window:minimize()
    end
end

-- Restore all minimized windows.
_M.unMinimizeAllWindows = function()
    local windows = hs.window.minimizedWindows()

    for _, window in pairs(windows) do
        window:unminimize()
        window:focus()
    end
end

-- Close all windows.
_M.closeAllWindows = function()
    local windows = hs.window.allWindows()

    for _, window in pairs(windows) do
        window:close()
    end
end

return _M
</file>

<file path=".luacheckrc">
-- $ luacheck .

std = {
    -- Ignore the check of all built-in variables
    globals = {
        "hs",
        "spoon",
        "io",
        "math",
        "os",
        "require",
        "print",
        "pairs",
        "ipairs",
        "table",
        "next",
        "getmetatable",
        "setmetatable",
        "string",
        "tonumber",
        "tostring",
        "pcall",
        "assert",
        "type",
        "load",
        "error",
        "configWatcher",
        "appWatcher"
    }
}

-- Ignored error types.
ignore = {
    -- Ignore checking code line length.
    "631"
}
</file>

<file path="utils_lib.lua">
local _M = {}

_M.name = "utils_lib"
_M.description = "General utility function library"

local charsize = function(ch)
    if not ch then
        return 0
    elseif ch >= 252 then
        return 6
    elseif ch >= 248 and ch < 252 then
        return 5
    elseif ch >= 240 and ch < 248 then
        return 4
    elseif ch >= 224 and ch < 240 then
        return 3
    elseif ch >= 192 and ch < 224 then
        return 2
    elseif ch < 192 then
        return 1
    end
end

_M.utf8len = function(str)
    local len = 0
    local aNum = 0 -- number of alphabetic characters
    local hNum = 0 -- number of Chinese characters
    local currentIndex = 1

    while currentIndex <= #str do
        local char = string.byte(str, currentIndex)
        local cs = charsize(char)

        currentIndex = currentIndex + cs
        len = len + 1
        if cs == 1 then
            aNum = aNum + 1
        elseif cs >= 2 then
            hNum = hNum + 1
        end
    end

    return len, aNum, hNum
end

_M.utf8sub = function(str, startChar, numChars)
    local startIndex = 1
    while startChar > 1 do
        local char = string.byte(str, startIndex)
        startIndex = startIndex + charsize(char)
        startChar = startChar - 1
    end

    local currentIndex = startIndex

    while numChars > 0 and currentIndex <= #str do
        local char = string.byte(str, currentIndex)
        currentIndex = currentIndex + charsize(char)
        numChars = numChars - 1
    end

    return str:sub(startIndex, currentIndex - 1)
end

-- table to string serialization
_M.serialize = function(self, obj)
    local lua = ""
    local t = type(obj)

    if t == "number" then
        lua = lua .. obj
    elseif t == "boolean" then
        lua = lua .. tostring(obj)
    elseif t == "string" then
        lua = lua .. string.format("%q", obj)
    elseif t == "table" then
        lua = lua .. "{\n"
        for k, v in pairs(obj) do
            lua = lua .. "[" .. self.serialize(k) .. "]=" .. self.serialize(v) .. ",\n"
        end

        local metatable = getmetatable(obj)
        if metatable ~= nil and type(metatable.__index) == "table" then
            for k, v in pairs(metatable.__index) do
                lua = lua .. "[" .. self.serialize(k) .. "]=" .. self.serialize(v) .. ",\n"
            end
        end

        lua = lua .. "}"
    elseif t == "nil" then
        return nil
    else
        error("can not serialize a " .. t .. " type.")
    end

    return lua
end

-- string to table deserialization
_M.unserialize = function(lua)
    local t = type(lua)
    if t == "nil" or lua == "" then
        return nil
    elseif t == "number" or t == "string" or t == "boolean" then
        lua = tostring(lua)
    else
        error("can not unserialize a " .. t .. " type.")
    end

    lua = "return " .. lua
    local func = load(lua)

    if func == nil then
        return nil
    end

    return func()
end

_M.split = function(input, delimiter)
    input = tostring(input)
    delimiter = tostring(delimiter)
    if delimiter == "" then
        return false
    end

    local pos, arr = 0, {}
    -- for each divider found
    for st, sp in function()
        return string.find(input, delimiter, pos, true)
    end do
        table.insert(arr, string.sub(input, pos, st - 1))
        pos = sp + 1
    end

    table.insert(arr, string.sub(input, pos))

    return arr
end

_M.trim = function(s)
    if s == nil then
        return ""
    end

    return (s:gsub("^%s+", ""):gsub("%s+$", ""))
end

_M.pushleft = function(list, value)
    local first = list.first - 1

    list.first = first
    list[first] = value
end

_M.pushright = function(list, value)
    local last = list.last + 1

    list.last = last
    list[last] = value
end

_M.popleft = function(list)
    local first = list.first
    if first > list.last then
        error("list is empty")
    end

    local value = list[first]
    list[first] = nil -- to allow garbage collection
    list.first = first + 1

    return value
end

_M.popright = function(list)
    local last = list.last
    if list.first > last then
        error("list is empty")
    end

    local value = list[last]
    list[last] = nil -- to allow garbage collection
    list.last = last - 1

    return value
end

_M.day_step = function(old_day, step)
    local y, m, d
    if "0" ~= string.sub(old_day, 6, 6) then
        m = string.sub(old_day, 6, 7)
    else
        m = string.sub(old_day, 7, 7)
    end

    if "0" ~= string.sub(old_day, 9, 9) then
        d = string.sub(old_day, 9, 10)
    else
        d = string.sub(old_day, 10, 10)
    end

    y = string.sub(old_day, 0, 4)

    local old_time = os.time({year = y, month = m, day = d})
    local new_time = old_time + 86400 * step

    local new_day = os.date("*t", new_time)

    local res
    if tonumber(new_day.day) < 10 and tonumber(new_day.month) < 10 then
        res = new_day.year .. "-" .. "0" .. new_day.month .. "-" .. "0" .. new_day.day
    elseif tonumber(new_day.month) < 10 then
        res = new_day.year .. "-" .. "0" .. new_day.month .. "-" .. new_day.day
    elseif tonumber(new_day.day) < 10 then
        res = new_day.year .. "-" .. new_day.month .. "-" .. "0" .. new_day.day
    else
        res = new_day.year .. "-" .. new_day.month .. "-" .. new_day.day
    end

    return res
end

return _M
</file>

<file path="window_manipulation.lua">
local _M = {}

_M.name = "window_manipulation"
_M.description = "App window management, e.g. move, enlarge, shrink, split screen, etc."

local window_position = require("keybindings_config").window_position
local window_movement = require("keybindings_config").window_movement
local window_resize = require("keybindings_config").window_resize
local window_batch = require("keybindings_config").window_batch
local window_monitor = require("keybindings_config").window_monitor

local window_lib = require("window_lib")

local log = hs.logger.new("window")

-- ********** window position **********
-- Center
hs.hotkey.bind(
    window_position.center.prefix,
    window_position.center.key,
    window_position.center.message,
    function()
        window_lib.moveAndResize("center")
    end
)
-- Left half of screen
hs.hotkey.bind(
    window_position.left.prefix,
    window_position.left.key,
    window_position.left.message,
    function()
        window_lib.moveAndResize("halfleft")
    end
)
-- Right half of screen
hs.hotkey.bind(
    window_position.right.prefix,
    window_position.right.key,
    window_position.right.message,
    function()
        window_lib.moveAndResize("halfright")
    end
)
-- Upper half of screen
hs.hotkey.bind(
    window_position.up.prefix,
    window_position.up.key,
    window_position.up.message,
    function()
        window_lib.moveAndResize("halfup")
    end
)
-- Lower half of screen
hs.hotkey.bind(
    window_position.down.prefix,
    window_position.down.key,
    window_position.down.message,
    function()
        window_lib.moveAndResize("halfdown")
    end
)
-- Top left corner
hs.hotkey.bind(
    window_position.top_left.prefix,
    window_position.top_left.key,
    window_position.top_left.message,
    function()
        window_lib.moveAndResize("cornerTopLeft")
    end
)
-- Top right corner
hs.hotkey.bind(
    window_position.top_right.prefix,
    window_position.top_right.key,
    window_position.top_right.message,
    function()
        window_lib.moveAndResize("cornerTopRight")
    end
)
-- Bottom left corner
hs.hotkey.bind(
    window_position.bottom_left.prefix,
    window_position.bottom_left.key,
    window_position.bottom_left.message,
    function()
        window_lib.moveAndResize("cornerBottomLeft")
    end
)
-- Bottom right corner
hs.hotkey.bind(
    window_position.bottom_right.prefix,
    window_position.bottom_right.key,
    window_position.bottom_right.message,
    function()
        window_lib.moveAndResize("cornerBottomRight")
    end
)
-- Left 1/3 (landscape) or top 1/3 (portrait)
hs.hotkey.bind(
    window_position.left_1_3.prefix,
    window_position.left_1_3.key,
    window_position.left_1_3.message,
    function()
        window_lib.moveAndResize("left_1_3")
    end
)
-- Right 1/3 (landscape) or bottom 1/3 (portrait)
hs.hotkey.bind(
    window_position.right_1_3.prefix,
    window_position.right_1_3.key,
    window_position.right_1_3.message,
    function()
        window_lib.moveAndResize("right_1_3")
    end
)
-- Left 2/3 (landscape) or top 2/3 (portrait)
hs.hotkey.bind(
    window_position.left_2_3.prefix,
    window_position.left_2_3.key,
    window_position.left_2_3.message,
    function()
        window_lib.moveAndResize("left_2_3")
    end
)
-- Right 2/3 (landscape) or bottom 2/3 (portrait)
hs.hotkey.bind(
    window_position.right_2_3.prefix,
    window_position.right_2_3.key,
    window_position.right_2_3.message,
    function()
        window_lib.moveAndResize("right_2_3")
    end
)

-- ********** window resize **********
-- Maximize
hs.hotkey.bind(
    window_resize.max.prefix,
    window_resize.max.key,
    window_resize.max.message,
    function()
        window_lib.moveAndResize("max")
    end
)
-- Proportionally enlarge window
hs.hotkey.bind(
    window_resize.stretch.prefix,
    window_resize.stretch.key,
    window_resize.stretch.message,
    function()
        window_lib.moveAndResize("stretch")
    end
)
-- Proportionally shrink window
hs.hotkey.bind(
    window_resize.shrink.prefix,
    window_resize.shrink.key,
    window_resize.shrink.message,
    function()
        window_lib.moveAndResize("shrink")
    end
)
-- Stretch based on bottom edge, upward or downward.
hs.hotkey.bind(
    window_resize.stretch_up.prefix,
    window_resize.stretch_up.key,
    window_resize.stretch_up.message,
    function()
        window_lib.directionStepResize("up")
    end,
    nil,
    function()
        window_lib.directionStepResize("up")
    end
)
hs.hotkey.bind(
    window_resize.stretch_down.prefix,
    window_resize.stretch_down.key,
    window_resize.stretch_down.message,
    function()
        window_lib.directionStepResize("down")
    end,
    nil,
    function()
        window_lib.directionStepResize("down")
    end
)
-- Stretch based on right edge, leftward or rightward.
hs.hotkey.bind(
    window_resize.stretch_left.prefix,
    window_resize.stretch_left.key,
    window_resize.stretch_left.message,
    function()
        window_lib.directionStepResize("left")
    end,
    nil,
    function()
        window_lib.directionStepResize("left")
    end
)
hs.hotkey.bind(
    window_resize.stretch_right.prefix,
    window_resize.stretch_right.key,
    window_resize.stretch_right.message,
    function()
        window_lib.directionStepResize("right")
    end,
    nil,
    function()
        window_lib.directionStepResize("right")
    end
)

-- ********** window movement **********
-- Move window up, down, left, or right.
hs.hotkey.bind(
    window_movement.to_up.prefix,
    window_movement.to_up.key,
    window_movement.to_up.message,
    function()
        window_lib.stepMove("up")
    end,
    nil,
    function()
        window_lib.stepMove("up")
    end
)
hs.hotkey.bind(
    window_movement.to_down.prefix,
    window_movement.to_down.key,
    window_movement.to_down.message,
    function()
        window_lib.stepMove("down")
    end,
    nil,
    function()
        window_lib.stepMove("down")
    end
)
hs.hotkey.bind(
    window_movement.to_left.prefix,
    window_movement.to_left.key,
    window_movement.to_left.message,
    function()
        window_lib.stepMove("left")
    end,
    nil,
    function()
        window_lib.stepMove("left")
    end
)
hs.hotkey.bind(
    window_movement.to_right.prefix,
    window_movement.to_right.key,
    window_movement.to_right.message,
    function()
        window_lib.stepMove("right")
    end,
    nil,
    function()
        window_lib.stepMove("right")
    end
)

-- ********** window monitor **********
-- Move window to above, below, left, right, or next monitor.
hs.hotkey.bind(
    window_monitor.to_above_screen.prefix,
    window_monitor.to_above_screen.key,
    window_monitor.to_above_screen.message,
    function()
        log.d("move to above monitor")
        window_lib.moveToScreen("up")
    end
)
hs.hotkey.bind(
    window_monitor.to_below_screen.prefix,
    window_monitor.to_below_screen.key,
    window_monitor.to_below_screen.message,
    function()
        log.d("move to below monitor")
        window_lib.moveToScreen("down")
    end
)
hs.hotkey.bind(
    window_monitor.to_left_screen.prefix,
    window_monitor.to_left_screen.key,
    window_monitor.to_left_screen.message,
    function()
        log.d("move to left monitor")
        window_lib.moveToScreen("left")
    end
)
hs.hotkey.bind(
    window_monitor.to_right_screen.prefix,
    window_monitor.to_right_screen.key,
    window_monitor.to_right_screen.message,
    function()
        log.d("move to right monitor")
        window_lib.moveToScreen("right")
    end
)
hs.hotkey.bind(
    window_monitor.to_next_screen.prefix,
    window_monitor.to_next_screen.key,
    window_monitor.to_next_screen.message,
    function()
        log.d("move to next monitor")
        window_lib.moveToScreen("next")
    end
)

-- ********** window batch **********
-- Minimize all windows
hs.hotkey.bind(
    window_batch.minimize_all_windows.prefix,
    window_batch.minimize_all_windows.key,
    window_batch.minimize_all_windows.message,
    function()
        log.d("minimized all windows")
        window_lib.minimizeAllWindows()
    end
)
-- Restore all minimized windows
hs.hotkey.bind(
    window_batch.un_minimize_all_windows.prefix,
    window_batch.un_minimize_all_windows.key,
    window_batch.un_minimize_all_windows.message,
    function()
        log.d("unminimize all windows")
        window_lib.unMinimizeAllWindows()
    end
)
-- Close all windows
hs.hotkey.bind(
    window_batch.close_all_windows.prefix,
    window_batch.close_all_windows.key,
    window_batch.close_all_windows.message,
    function()
        log.d("close all windows")
        window_lib.closeAllWindows()
    end
)

return _M
</file>

<file path="app_launch.lua">
local _M = {}

_M.name = "app_launch"
_M.description = "App launch or switch"

local apps = require "keybindings_config".apps

local log = hs.logger.new("appLaunch")

-- Show or hide app
local function toggleAppByBundleId(bundleID)
    local frontApp = hs.application.frontmostApplication()
    if frontApp:bundleID() == bundleID and frontApp:focusedWindow() then
        log.d(string.format("hide app: %s", bundleID))
        frontApp:hide()
    else
        log.d(string.format("launch app: %s", bundleID))
        hs.application.launchOrFocusByBundleID(bundleID)
    end
end

hs.fnutils.each(
    apps,
    function(item)
        hs.hotkey.bind(
            item.prefix,
            item.key,
            item.message,
            function()
                toggleAppByBundleId(item.bundleId)
            end
        )
    end
)

return _M
</file>

<file path="auto_reload.lua">
local _M = {}

_M.name = "auto_reload"
_M.description = "Automatically reload when lua files change, for immediate effect"

local function reload(files)
    local doReload = false

    for _, file in pairs(files) do
        if file:sub(-4) == ".lua" then
            doReload = true
        end
    end

    if doReload then
        hs.console.clearConsole()
        hs.reload()
    end
end

configWatcher = hs.pathwatcher.new(hs.configdir, reload)

configWatcher:start()

hs.alert.show("hammerspoon reloaded")

return _M
</file>

<file path="bing_daily_wallpaper.lua">
local _M = {}

_M.name = "bing_daily_wallpaper"
_M.description = "Use Bing Daily Picture as desktop wallpaper"

local log = hs.logger.new("wallpaper")

-- How many seconds between each Bing request to update the wallpaper:
--   2 minutes: 2 * 60
--   2 hours: 2 * 60 * 60
local do_every_seconds = 1 * 60 * 60

-- It is best to set this according to your screen resolution.
local pic_width, pic_height = 3072, 1920

-- How many days of Bing wallpapers to fetch (one wallpaper per day):
--   Set to 1 to always use the current Bing wallpaper;
--   Set to greater than 1 to randomly choose from recent wallpapers each update.
local pic_count = 1

local pic_save_path = os.getenv("HOME") .. "/.Trash/"

-- API endpoint to get the JSON list of image URLs.
local bing_pictures_url =
    "https://cn.bing.com/HPImageArchive.aspx?format=js&idx=0&n=" ..
    pic_count .. "&nc=1612409408851&pid=hp&FORM=BEHPTB&uhd=1&uhdwidth=" .. pic_width .. "&uhdheight=" .. pic_height

local user_agent_str =
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/603.2.4 (KHTML, like Gecko) Version/10.1.1 Safari/603.2.4"

local function curl_callback(exitCode, stdOut, stdErr)
    if exitCode == 0 then
        _M.task = nil
        _M.last_pic = hs.http.urlParts(_M.full_url).query

        local localpath = pic_save_path .. hs.http.urlParts(_M.full_url).query

        -- Set wallpaper for each display (note: not for extra macOS virtual desktops, only for physical displays)
        local screens = hs.screen.allScreens()
        for _, screen in ipairs(screens) do
            log.i(string.format("set wallpaper for %s", screen))
            screen:desktopImageURL("file://" .. localpath)
        end
    else
        log.e(stdOut, stdErr)
    end
end

local function bing_request()
    hs.http.asyncGet(
        bing_pictures_url,
        {["User-Agent"] = user_agent_str},
        function(stat, body, _)
            if stat == 200 then
                if
                    pcall(
                        function()
                            hs.json.decode(body)
                        end
                    )
                 then
                    local decode_data = hs.json.decode(body)
                    local image_urls = decode_data.images
                    local pic_url = image_urls[math.random(1, #image_urls)].url
                    local pic_name = hs.http.urlParts(pic_url).query

                    -- Only set the wallpaper if the new picture is different from the previous one.
                    if _M.last_pic ~= pic_name then
                        _M.full_url = "https://www.bing.com" .. pic_url

                        if _M.task then
                            _M.task:terminate()
                            _M.task = nil
                        end

                        local localpath = pic_save_path .. hs.http.urlParts(_M.full_url).query

                        -- Actually trigger the wallpaper image download here.
                        _M.task =
                            hs.task.new(
                            "/usr/bin/curl",
                            curl_callback,
                            {"-A", user_agent_str, _M.full_url, "-o", localpath}
                        )

                        _M.task:start()

                        log.d("wallpaper changed, current picture: ", pic_name, " last picture: ", _M.last_pic)
                    else
                        log.d("current picture is same as last picture: ", pic_name)
                    end
                end
            else
                log.e("Bing URL request failed!")
            end
        end
    )
end

-- Update wallpaper every time the config is reloaded.
bing_request()

-- Automatically update at regular intervals.
if _M.timer == nil then
    _M.timer =
        hs.timer.doEvery(
        do_every_seconds,
        function()
            bing_request()
        end
    )
else
    _M.timer:start()
end

return _M
</file>

<file path="system_manage.lua">
local _M = {}

_M.name = "system_manage"
_M.description = "System management, e.g.: lock screen, start screensaver, restart, etc."

local system = require("keybindings_config").system

local log = hs.logger.new("system")

-- Lock screen.
hs.hotkey.bind(
    system.lock_screen.prefix,
    system.lock_screen.key,
    system.lock_screen.message,
    function()
        log.d("lock screen")
        hs.caffeinate.lockScreen()
    end
)

return _M
</file>

<file path="CHANGELOG.md">
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## v0.6.1

### Added

- Add `hs.logger` to manage logs

### Changed

- Optimize input method switch code structure
- Optimize keybindings cheatsheet

## v0.6.0

### Added

New feature: Auto switch input method according to the application, for example:

```lua
-- keybindings_config.lua
_M.auto_input_methods = {
    ["org.hammerspoon.Hammerspoon"] = abc,
    ["com.apple.finder"] = abc,
    ["com.apple.Spotlight"] = abc,
    ["io.alacritty"] = abc,
    ["com.google.Chrome"] = abc,
    ["com.microsoft.VSCode"] = abc,
    ["com.postmanlabs.mac"] = abc,
    ["com.tencent.xinWeChat"] = pinyin,
    ["com.apple.mail"] = pinyin,
    ["com.microsoft.Excel"] = pinyin,
    ["mac.im.qihoo.net"] = pinyin,
    ["ynote-desktop"] = pinyin
}
```

### Changed

- Optimize manual switch input method.

## v0.5.1

### Changed

- Application launch -> Application launch or hide
- Keybindings Cheatsheet: [Application Launch] -> [App Launch Or Hide]

## v0.5.0

### Added

#### Features

- Open URL directly.
- Auto add keybinding items to cheatsheet.

#### Keybindings

Open URL:

- <kbd>â¥</kbd> + <kbd>8</kbd>: github.com
- <kbd>â¥</kbd> + <kbd>9</kbd>: google.com
- <kbd>â¥</kbd> + <kbd>7</kbd>: bing.com

## v0.4.1

### Changed

- Optimize keybindings cheatsheet:

  - Window manipulation grouping
  - Add `System Mangement`
  - Add `Input Methods`
  - Add `Toggle Keybindings Cheatsheet` in `Application Launch`

- Optimize README.md

## v0.4.0

### Added

#### Features

- New window manipulation: Minimize or Unminimize or Close all windows.
- Add system manage

#### Keybindins

Minimize or Unminimize or Close all windows:

- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd> + <kbd>M</kbd>: Minimize All Windows
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd> + <kbd>U</kbd>: Unminimize All Windows
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd> + <kbd>Q</kbd>: Close All Windows

System Manage:

- <kbd>â¥</kbd> + <kbd>Q</kbd>: Lock Screen
- <kbd>â¥</kbd> + <kbd>S</kbd>: Start Screensaver
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd><kbd>â§</kbd> + <kbd>R</kbd>: Restart Computer
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd><kbd>â§</kbd> + <kbd>S</kbd>: Shutdown Computer

### Changed

- Optimize bing daily wallpaper.
- Optimize `Center Window` for window manipulation:  
  From keeping the original size in the center, to changing to the appropriate size and centering.

## v0.3.1

### Changed

Set wallpaper for main monitor -> Set wallpaper for all monitors.

### Fixed

- Fix bug for `Move to Next Monitor`

## v0.3.0

### Added

#### Features

- Keep the desktop wallpaper the same as the bing daily picture.
- New window manipulation: Move to other monitors.

#### Keybindins

Move to other monitors:

- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>UP</kbd>: Move to Above Monitor
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>DOWN</kbd>: Move to Below Monitor
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>LEFT</kbd>: Move to Left Monitor
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>RIGHT</kbd>: Move to Right Monitor
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>SPACE</kbd>: Move to Next Monitor

## v0.2.0

### Added

#### Features

New window manipulation: Stretch from bottom or right side.

#### Keybindins

Stretch from bottom or right side:

- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd><kbd>â§</kbd> + <kbd>K</kbd>: Bottom Side Stretch Upward
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd><kbd>â§</kbd> + <kbd>J</kbd>: Bottom Side Stretch Downward
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd><kbd>â§</kbd> + <kbd>H</kbd>: Right Side Stretch Leftward
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd><kbd>â§</kbd> + <kbd>L</kbd>: Right Side Stretch Rightward

## v0.1.0

### Added

#### Features

- Application quick launch or switch.
- Application window manipulation, such as movement, stretch or shrink, change position, etc.
- Quickly switch to the specified input method.
- Toggle the keybindings cheatsheet.
- Configuration file changes will be automatically reloaded to take effect in real time.
- The code structure is clear and easy to customize into your own configuration.

#### Keybindins

##### Toggle keybindings cheatsheet

<kbd>â¥</kbd> + <kbd>/</kbd>

##### Switch to the specified input method

- <kbd>â¥</kbd> + <kbd>1</kbd>: ABC
- <kbd>â¥</kbd> + <kbd>2</kbd>: Pinyin

##### Application launch or switch

- <kbd>â¥</kbd> + <kbd>H</kbd>: Hammerspoon Console
- <kbd>â¥</kbd> + <kbd>F</kbd>: Finder
- <kbd>â¥</kbd> + <kbd>I</kbd>: Alacritty
- <kbd>â¥</kbd> + <kbd>C</kbd>: Chrome
- <kbd>â¥</kbd> + <kbd>N</kbd>: YNote
- <kbd>â¥</kbd> + <kbd>M</kbd>: Mail
- <kbd>â¥</kbd> + <kbd>P</kbd>: Postman
- <kbd>â¥</kbd> + <kbd>E</kbd>: Excel
- <kbd>â¥</kbd> + <kbd>V</kbd>: VSCode
- <kbd>â¥</kbd> + <kbd>W</kbd>: WeChat

##### Window manipulation

- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>=</kbd>: Stretch Outward
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>-</kbd>: Shrink Inward

- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>C</kbd>: Center window
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>M</kbd>: Max window

- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>H</kbd>: Left Half of Screen
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>L</kbd>: Right Half of Screen
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>K</kbd>: Up Half of Screen
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>J</kbd>: Down Half of Screen

- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>U</kbd>: Top Left Corner
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>I</kbd>: Top Right Corner
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>O</kbd>: Bottom Left Corner
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>P</kbd>: Bottom Right Corner

- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>Q</kbd>: Left or Top 1/3
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>W</kbd>: Right or Bottom 1/3
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>E</kbd>: Left or Top 2/3
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>R</kbd>: Right or Bottom 2/3

- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd> + <kbd>K</kbd>: Move Upward
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd> + <kbd>J</kbd>: Move Downward
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd> + <kbd>H</kbd>: Move Leftward
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd> + <kbd>L</kbd>: Move Rightward
</file>

<file path="keybindings_cheatsheet.lua">
local _M = {}

_M.name = "keybindings_cheatsheet"
_M.description = "Display keybindings cheatsheet"

local keybindings_cheatsheet = require "keybindings_config".keybindings_cheatsheet
local system = require "keybindings_config".system
local websites = require "keybindings_config".websites
local apps = require "keybindings_config".apps

local window_position = require("keybindings_config").window_position
local window_movement = require("keybindings_config").window_movement
local window_resize = require("keybindings_config").window_resize
local window_monitor = require("keybindings_config").window_monitor
local window_batch = require("keybindings_config").window_batch

local utf8len = require "utils_lib".utf8len
local utf8sub = require "utils_lib".utf8sub
local split = require "utils_lib".split
local trim = require "utils_lib".trim

-- Background opacity
local background_opacity = 0.8
-- Maximum length per line
local max_line_length = 35
-- Number of lines per column
local max_line_number = 20
-- Line spacing
local line_spacing = 5
-- Distance between text and separator line
local seperator_spacing = 6
-- Font name
local font_name = "Monaco"
-- Font size
local font_size = 15
-- Font color
local font_color = "#c6c6c6"
-- Separator line color
local stroke_color = "#585858"
-- Separator line width
local stroke_width = 1

local focusedWindow = hs.window.focusedWindow()
if focusedWindow == nil then
    return
end

local screen = focusedWindow:screen():frame()

local cooridnate_x = screen.w / 2
local cooridnate_y = screen.h / 2

-- Total number of keybindings
local num = 0

local canvas = hs.canvas.new({x = 0, y = 0, w = 0, h = 0})

-- Background panel
canvas:appendElements(
    {
        id = "pannel",
        action = "fill",
        fillColor = {alpha = background_opacity, red = 0, green = 0, blue = 0},
        type = "rectangle"
    }
)

local function styleText(text)
    return hs.styledtext.new(
        text,
        {
            font = {
                name = font_name,
                size = font_size
            },
            color = {hex = font_color},
            paragraphStyle = {
                lineSpacing = line_spacing
            }
        }
    )
end

local function formatText()
    -- Load all bound hotkeys
    local hotkeys = hs.hotkey.getHotkeys()

    local renderText = {}

    local keybindingsCheatsheet = {}
    table.insert(keybindingsCheatsheet, {msg = "[Cheatsheet]"})
    table.insert(keybindingsCheatsheet, {msg = keybindings_cheatsheet.description})

    local systemManagement = {}
    table.insert(systemManagement, {msg = "[System Management]"})

    local WebsiteOpen = {}
    table.insert(WebsiteOpen, {msg = "[Website Open]"})

    local applicationLaunch = {}
    table.insert(applicationLaunch, {msg = "[App Launch Or Hide]"})

    local windowPosition = {}
    table.insert(windowPosition, {msg = "[Window Position]"})

    local windowMovement = {}
    table.insert(windowMovement, {msg = "[Window Movement]"})

    local windowResize = {}
    table.insert(windowResize, {msg = "[Window Resize]"})

    local windowMonitor = {}
    table.insert(windowMonitor, {msg = "[Window Monitor]"})

    local windowBatch = {}
    table.insert(windowBatch, {msg = "[Window Batch]"})

    -- Categorize keybindings
    for _, v in ipairs(hotkeys) do
        local _msg = trim(split(v.msg, ":")[2])

        -- System management
        for _, s in pairs(system) do
            if _msg == s.message then
                table.insert(systemManagement, {msg = v.msg})
                goto continue
            end
        end

        -- Open URL.
        for _, u in pairs(websites) do
            if _msg == u.message then
                table.insert(WebsiteOpen, {msg = v.msg})
                goto continue
            end
        end

        -- Application launch or switch
        for _, a in pairs(apps) do
            if _msg == a.message then
                table.insert(applicationLaunch, {msg = v.msg})
                goto continue
            end
        end

        -- Window position
        for _, wp in pairs(window_position) do
            if _msg == wp.message then
                table.insert(windowPosition, {msg = v.msg})
                goto continue
            end
        end

        -- Window movement
        for _, wm in pairs(window_movement) do
            if _msg == wm.message then
                table.insert(windowMovement, {msg = v.msg})
                goto continue
            end
        end

        -- Window resize
        for _, wr in pairs(window_resize) do
            if _msg == wr.message then
                table.insert(windowResize, {msg = v.msg})
                goto continue
            end
        end

        -- Window monitor
        for _, wm in pairs(window_monitor) do
            if _msg == wm.message then
                table.insert(windowMonitor, {msg = v.msg})
                goto continue
            end
        end

        -- Window batch
        for _, wb in pairs(window_batch) do
            if _msg == wb.message then
                table.insert(windowBatch, {msg = v.msg})
                goto continue
            end
        end

        ::continue::
    end

    hotkeys = {}

    for _, v in ipairs(keybindingsCheatsheet) do
        table.insert(hotkeys, {msg = v.msg})
    end

    table.insert(hotkeys, {msg = ""})

    table.insert(hotkeys, {msg = ""})

    for _, v in ipairs(systemManagement) do
        table.insert(hotkeys, {msg = v.msg})
    end

    table.insert(hotkeys, {msg = ""})

    for _, v in ipairs(WebsiteOpen) do
        table.insert(hotkeys, {msg = v.msg})
    end

    table.insert(hotkeys, {msg = ""})

    for _, v in ipairs(applicationLaunch) do
        table.insert(hotkeys, {msg = v.msg})
    end

    table.insert(hotkeys, {msg = ""})

    for _, v in ipairs(windowPosition) do
        table.insert(hotkeys, {msg = v.msg})
    end

    table.insert(hotkeys, {msg = ""})

    for _, v in ipairs(windowMovement) do
        table.insert(hotkeys, {msg = v.msg})
    end

    table.insert(hotkeys, {msg = ""})

    for _, v in ipairs(windowResize) do
        table.insert(hotkeys, {msg = v.msg})
    end

    table.insert(hotkeys, {msg = ""})

    for _, v in ipairs(windowMonitor) do
        table.insert(hotkeys, {msg = v.msg})
    end

    table.insert(hotkeys, {msg = ""})

    for _, v in ipairs(windowBatch) do
        table.insert(hotkeys, {msg = v.msg})
    end

    -- Ensure fixed text length
    for _, v in ipairs(hotkeys) do
        num = num + 1

        local msg = v.msg
        local len = utf8len(msg)

        -- If the maximum length is exceeded, truncate the excess and start a new line.
        while len > max_line_length do
            local substr = utf8sub(msg, 1, max_line_length)
            table.insert(renderText, {line = substr})

            msg = utf8sub(msg, max_line_length + 1, len)
            len = utf8len(msg)
        end

        for _ = 1, max_line_length - utf8len(msg), 1 do
            msg = msg .. " "
        end

        table.insert(renderText, {line = msg})
    end

    return renderText
end

local function drawText(renderText)
    local w = 0
    local h = 0

    -- Text to display in each column
    local column = ""

    for k, v in ipairs(renderText) do
        local line = v.line
        if math.fmod(k, max_line_number) == 0 then
            column = column .. line .. "  "
        else
            column = column .. line .. "  \n"
        end

        -- k mod max_line_number
        if math.fmod(k, max_line_number) == 0 then
            local itemText = styleText(column)
            local size = canvas:minimumTextSize(itemText)

            w = w + size.w
            if k == max_line_number then
                h = size.h
            end

            canvas:appendElements(
                {
                    type = "text",
                    text = itemText,
                    frame = {
                        x = (k / max_line_number - 1) * size.w + seperator_spacing,
                        y = 0,
                        w = size.w + seperator_spacing,
                        h = size.h
                    }
                }
            )

            canvas:appendElements(
                {
                    type = "segments",
                    closed = false,
                    strokeColor = {hex = stroke_color},
                    action = "stroke",
                    strokeWidth = stroke_width,
                    coordinates = {
                        {x = (k / max_line_number) * size.w - seperator_spacing, y = 0},
                        {x = (k / max_line_number) * size.w - seperator_spacing, y = h}
                    }
                }
            )

            column = ""
        end
    end

    if column ~= nil then
        local itemText = styleText(column)
        local size = canvas:minimumTextSize(itemText)

        w = w + size.w

        canvas:appendElements(
            {
                type = "text",
                text = itemText,
                frame = {
                    x = math.ceil(num / max_line_number - 1) * size.w + seperator_spacing,
                    y = 0,
                    w = size.w + seperator_spacing,
                    h = size.h
                }
            }
        )
    end

    -- Center display
    canvas:frame({x = cooridnate_x - w / 2, y = cooridnate_y - h / 2, w = w, h = h})
end

-- Not displayed by default
local show = false
local function toggleKeybindingsCheatsheet()
    if show then
        -- 0.3s transition
        canvas:hide(.3)
    else
        canvas:show(.3)
    end

    show = not show
end

-- Perform drawing
drawText(formatText())

-- Show/hide keybindings cheatsheet
hs.hotkey.bind(
    keybindings_cheatsheet.prefix,
    keybindings_cheatsheet.key,
    keybindings_cheatsheet.message,
    toggleKeybindingsCheatsheet
)

return _M
</file>

<file path="init.lua">
local _M = {}

_M.__index = _M

_M.name = "init"
_M.author = "MT"
_M.license = "MIT"
_M.homepage = "https://github.com/mtoan1/dot-hammerspoon"

-- Hammerspoon Preferences
hs.autoLaunch(true)
hs.automaticallyCheckForUpdates(false)
hs.consoleOnTop(false)
hs.dockIcon(false)
hs.menuIcon(true)
hs.uploadCrashData(false)

-- Duration in seconds to show the hotkey alert message each time a hotkey is pressed; 0 to disable.
hs.hotkey.alertDuration = 0

-- Duration of window animation; set to 0 to disable animation effects.
hs.window.animationDuration = 0

-- Log level for messages printed in the Hammerspoon Console.
-- Options: verbose, debug, info, warning, error, nothing
-- Default: warning
hs.logger.defaultLogLevel = "warning"

-- Quickly launch or switch between apps
require("app_launch")

-- App window operations
require("window_manipulation")

-- System management
require("system_manage")

-- Quick website access
require("website_open")


-- Keep the desktop wallpaper in sync with Bing Daily Picture
require("bing_daily_wallpaper")

-- Show the keybindings cheatsheet panel
require("keybindings_cheatsheet")

-- Automatically reload when lua files change
require("auto_reload")

return _M
</file>

<file path="README.md">
# ![sre.im](https://sre.im/favicon-64.png)dot-hammerspoon

![Language](https://img.shields.io/badge/language-Lua-orange)
![Platform](https://img.shields.io/badge/platform-macOS-lightgrey)
[![Version](https://img.shields.io/github/v/release/windvalley/dot-hammerspoon?include_prereleases)](https://github.com/windvalley/dot-hammerspoon/releases)
[![LICENSE](https://img.shields.io/github/license/windvalley/dot-hammerspoon)](LICENSE)
![Page Views](https://views.whatilearened.today/views/github/windvalley/dot-hammerspoon.svg)

`dot-hammerspoon` is my personal configuration for [Hammerspoon](http://www.hammerspoon.org/), and you can modify to suit your needs and preferences.

## Features

- Application quick launch or hide.
- Application window manipulation, such as moving, resizing, changing position, etc.
- System management, such as lock screen, restart system, etc.
- Open the specified website directly.
- Toggle the keybindings cheatsheet.
- Keep the desktop wallpaper the same as the bing daily picture.
- Auto reload configuration when lua files changes.
- The code structure is clear and easy to customize into your own configuration.

## Installation

1. Install [Hammerspoon](http://www.hammerspoon.org/) first: `brew install hammerspoon --cask`

2. Run `Hammerspoon.app` and follow the prompts to enable Accessibility access for the app.

3. `git clone --depth 1 https://github.com/windvalley/dot-hammerspoon.git ~/.hammerspoon`

Keep update:

```sh
cd ~/.hammerspoon && git pull
```

## Usage

### Toggle Keybindings Cheatsheet

![toggle-keybindings-cheatsheet](https://user-images.githubusercontent.com/6139938/213378139-2d005ac0-bce3-4798-a8b5-e2c23fd5817c.gif)

<kbd>â¥</kbd> + <kbd>/</kbd>


### System Management

- <kbd>â¥</kbd> + <kbd>Q</kbd>: Lock Screen
- <kbd>â¥</kbd> + <kbd>S</kbd>: Start Screensaver
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd><kbd>â§</kbd> + <kbd>R</kbd>: Restart Computer
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd><kbd>â§</kbd> + <kbd>S</kbd>: Shutdown Computer

### Website Open

- <kbd>â¥</kbd> + <kbd>8</kbd>: github.com
- <kbd>â¥</kbd> + <kbd>9</kbd>: google.com
- <kbd>â¥</kbd> + <kbd>7</kbd>: bing.com

### Application Launch or Hide

![application-launch](https://user-images.githubusercontent.com/6139938/213380921-4a8a891f-3476-4160-a23d-afd402f53c46.gif)

- <kbd>â¥</kbd> + <kbd>H</kbd>: Hammerspoon Console
- <kbd>â¥</kbd> + <kbd>F</kbd>: Finder
- <kbd>â¥</kbd> + <kbd>I</kbd>: Alacritty
- <kbd>â¥</kbd> + <kbd>C</kbd>: Chrome
- <kbd>â¥</kbd> + <kbd>O</kbd>: Obsidian
- <kbd>â¥</kbd> + <kbd>D</kbd>: Draw.io
- <kbd>â¥</kbd> + <kbd>K</kbd>: Freeplane
- <kbd>â¥</kbd> + <kbd>N</kbd>: YNote
- <kbd>â¥</kbd> + <kbd>M</kbd>: Mail
- <kbd>â¥</kbd> + <kbd>P</kbd>: Postman
- <kbd>â¥</kbd> + <kbd>E</kbd>: Excel
- <kbd>â¥</kbd> + <kbd>V</kbd>: VSCode
- <kbd>â¥</kbd> + <kbd>W</kbd>: WeChat

### Window Manipulation

#### Window Position

![window-position](https://user-images.githubusercontent.com/6139938/213381748-31c10324-aee6-48d4-9ec7-492611fac499.gif)

- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>C</kbd>: Center Window

- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>K</kbd>: Up Half of Screen
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>J</kbd>: Down Half of Screen
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>H</kbd>: Left Half of Screen
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>L</kbd>: Right Half of Screen

- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>U</kbd>: Top Left Corner
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>I</kbd>: Top Right Corner
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>O</kbd>: Bottom Left Corner
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>P</kbd>: Bottom Right Corner

- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>Q</kbd>: Left or Top 1/3
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>W</kbd>: Right or Bottom 1/3
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>E</kbd>: Left or Top 2/3
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>R</kbd>: Right or Bottom 2/3

#### Window Resize

![window-resize](https://user-images.githubusercontent.com/6139938/213382832-7f326b87-a704-441d-aa56-9c016f2072cc.gif)

- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>M</kbd>: Max Window

- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>=</kbd>: Stretch Outward
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>-</kbd>: Shrink Inward

- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd><kbd>â§</kbd> + <kbd>K</kbd>: Bottom Side Stretch Upward
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd><kbd>â§</kbd> + <kbd>J</kbd>: Bottom Side Stretch Downward
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd><kbd>â§</kbd> + <kbd>H</kbd>: Right Side Stretch Leftward
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd><kbd>â§</kbd> + <kbd>L</kbd>: Right Side Stretch Rightward

#### Window Movement

![window-movement](https://user-images.githubusercontent.com/6139938/213383576-facc8b81-a94f-4124-b0a1-409d23261421.gif)

- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd> + <kbd>K</kbd>: Move Upward
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd> + <kbd>J</kbd>: Move Downward
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd> + <kbd>H</kbd>: Move Leftward
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd> + <kbd>L</kbd>: Move Rightward

#### Window Monitor

- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>UP</kbd>: Move to Above Monitor
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>DOWN</kbd>: Move to Below Monitor
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>LEFT</kbd>: Move to Left Monitor
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>RIGHT</kbd>: Move to Right Monitor
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>SPACE</kbd>: Move to Next Monitor

#### Window Batch

- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd> + <kbd>M</kbd>: Minimize All Windows
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd> + <kbd>U</kbd>: Unminimize All Windows
- <kbd>â</kbd><kbd>â¥</kbd><kbd>â</kbd> + <kbd>Q</kbd>: Close All Windows

## Keybindings Customization

Modify the file `~/.hammerspoon/keybindings_config.lua` according to your keystroke habits.

## Some Useful Shortcuts Come With macOS

<details>
<summary>More details</summary>

### Desktop

- <kbd>â</kbd> + <kbd>RIGHT</kbd>: Switch to right desktop
- <kbd>â</kbd> + <kbd>LEFT</kbd>: Switch to left desktop
- <kbd>â</kbd> + <kbd>UP</kbd>: Toggle tiling windows
- <kbd>â¥</kbd><kbd>â</kbd> + <kbd>D</kbd>: Toggle dock

### Application

- <kbd>â</kbd> + <kbd>Q</kbd>: Close app
- <kbd>â</kbd> + <kbd>,</kbd>: Open the app's preferences
- <kbd>â</kbd><kbd>â§</kbd> + <kbd>/</kbd>: Toggle help

### Window

- <kbd>â</kbd> + <kbd>H</kbd>: Hide window
- <kbd>â</kbd> + <kbd>M</kbd>: Minimize window
- <kbd>â</kbd> + <kbd>N</kbd>: New window
- <kbd>â</kbd> + <kbd>W</kbd>: Close window
- <kbd>â</kbd> + <kbd>\`</kbd>: Switch between windows of the same application
- <kbd>â</kbd><kbd>â</kbd> + <kbd>F</kbd>: Toggle window fullscreen
- <kbd>â</kbd><kbd>â</kbd> + <kbd>H</kbd>: Hide all windows except the current one

### Window Tab

- <kbd>â</kbd><kbd>â§</kbd> + <kbd>[</kbd>: Switch to the left tab
- <kbd>â</kbd><kbd>â§</kbd> + <kbd>]</kbd>: Switch to the right tab
- <kbd>â</kbd> + <kbd>NUMBER</kbd>: Switch to the specified tab
- <kbd>â</kbd> + <kbd>9</kbd>: Switch to the last tab

### Cursor

- <kbd>â</kbd> + <kbd>P</kbd>: Move the cursor up
- <kbd>â</kbd> + <kbd>N</kbd>: Move the cursor down
- <kbd>â</kbd> + <kbd>B</kbd>: Move the cursor back/left
- <kbd>â</kbd> + <kbd>F</kbd>: Move the cursor forward/right
- <kbd>â</kbd> + <kbd>A</kbd>: Move the cursor to the beginning of the line
- <kbd>â</kbd> + <kbd>E</kbd>: Move the cursor to the end of the line

### File

- <kbd>â</kbd> + <kbd>BACKSPACE</kbd>: Delete the selected file
- <kbd>â</kbd> + <kbd>DOWN</kbd>: Go to a directory or open a file
- <kbd>â</kbd> + <kbd>UP</kbd>: Back to the upper level directory
- <kbd>â</kbd><kbd>â§</kbd> + <kbd>BACKSPACE</kbd>: Clear the Trash

### Others

- <kbd>â</kbd> + <kbd>+</kbd>: Expand font size
- <kbd>â</kbd> + <kbd>-</kbd>: Shrink font size
- <kbd>â</kbd> + <kbd>0</kbd>: Reset font size

- <kbd>â</kbd> + <kbd>Z</kbd>: Undo
- <kbd>â</kbd><kbd>â§</kbd> + <kbd>Z</kbd>: Redo
- <kbd>â</kbd> + <kbd>C</kbd>: Copy
- <kbd>â</kbd> + <kbd>V</kbd>: Paste
- <kbd>â</kbd><kbd>â¥</kbd> + <kbd>V</kbd>: Paste and delete the original object

</details>

## Acknowledgments

- [Hammerspoon](https://github.com/Hammerspoon/hammerspoon)
- [awesome-hammerspoon](https://github.com/ashfinal/awesome-hammerspoon)
- [KURANADO2/hammerspoon-kuranado](https://github.com/KURANADO2/hammerspoon-kuranado)

## License

This project is under the MIT License.
See the [LICENSE](LICENSE) file for the full license text.
</file>

<file path="keybindings_config.lua">
local _M = {}

_M.name = "keybindings_config"
_M.description = "Keybinding configuration"

-- Keybindings cheatsheet display
_M.keybindings_cheatsheet = {
	prefix = {
		"Option",
	},
	key = "/",
	message = "Toggle Keybindings Cheatsheet",
	description = "â¥/: Toggle Keybindings Cheatsheet",
}

-- System management
_M.system = {
	lock_screen = {
		prefix = { "Option" },
		key = "Q",
		message = "Lock Screen",
	},
}

-- Quickly open URL using default browser
_M.websites = {
	{
		prefix = { "Option" },
		key = "8",
		message = "github.com",
		target = "https://github.com/windvalley",
	},
	{
		prefix = { "Option" },
		key = "9",
		message = "google.com",
		target = "https://www.google.com",
	},
	{
		prefix = { "Option" },
		key = "7",
		message = "bing.com",
		target = "https://www.bing.com",
	},
}


-- App launch or hide
-- NOTE: Example to get an app's bundleId: osascript -e 'id of app "chrome"'
_M.apps = {
	{ prefix = { "Option" }, key = "H", message = "Hammerspoon Console", bundleId = "org.hammerspoon.Hammerspoon" },
	{ prefix = { "Option" }, key = "F", message = "Finder", bundleId = "com.apple.finder" },
	{ prefix = { "Option" }, key = "I", message = "ITerm", bundleId = "com.googlecode.iterm2" },
	{ prefix = { "Option" }, key = "A", message = "ChatWise", bundleId = "app.chatwise" },
	{ prefix = { "Option" }, key = "N", message = "Notion", bundleId = "notion.id" },
	{ prefix = { "Option" }, key = "D", message = "Discord", bundleId = "com.hnc.Discord" },
	{ prefix = { "Option" }, key = "K", message = "DataGrip", bundleId = "com.jetbrains.datagrip" },
	{ prefix = { "Option" }, key = "O", message = "OpenCat", bundleId = "tech.baye.OpenCat" },
	{ prefix = { "Option" }, key = "M", message = "Microsoft Teams", bundleId = "com.microsoft.teams2" },
	{ prefix = { "Option" }, key = "P", message = "Postman", bundleId = "com.postmanlabs.mac" },
	{ prefix = { "Option" }, key = "E", message = "Excel", bundleId = "com.microsoft.Excel" },
	{ prefix = { "Option" }, key = "V", message = "VSCode", bundleId = "com.microsoft.VSCode" },
	{ prefix = { "Option" }, key = "T", message = "Telegram", bundleId = "ru.keepcoder.Telegram" },
	{ prefix = { "Option" }, key = "W", message = "WeChat", bundleId = "com.tencent.xinWeChat" },
	{ prefix = { "Option" }, key = "S", message = "Safari", bundleId = "com.apple.Safari" },
	{ prefix = { "Option" }, key = "G", message = "Goland", bundleId = "com.jetbrains.goland" },
	{ prefix = { "Option" }, key = "C", message = "Google Chrome", bundleId = "com.google.Chrome" },
	{ prefix = { "Option" }, key = "R", message = "OBS", bundleId = "com.obsproject.obs-studio" },
	{ prefix = { "Option" }, key = "L", message = "Lens", bundleId = "com.electron.kontena-lens" },
}

-- Window management: change window position
_M.window_position = {
	-- **************************************
	-- Center
	center = { prefix = { "Ctrl", "Option" }, key = "C", message = "Center Window" },
	-- **************************************
	-- Left half of screen
	left = { prefix = { "Ctrl", "Option" }, key = "H", message = "Left Half of Screen" },
	-- Right half of screen
	right = { prefix = { "Ctrl", "Option" }, key = "L", message = "Right Half of Screen" },
	-- Upper half of screen
	up = { prefix = { "Ctrl", "Option" }, key = "K", message = "Up Half of Screen" },
	-- Lower half of screen
	down = { prefix = { "Ctrl", "Option" }, key = "J", message = "Down Half of Screen" },
	-- **************************************
	-- Top left corner
	top_left = { prefix = { "Ctrl", "Option" }, key = "Y", message = "Top Left Corner" },
	-- Top right corner
	top_right = { prefix = { "Ctrl", "Option" }, key = "O", message = "Top Right Corner" },
	-- Bottom left corner
	bottom_left = { prefix = { "Ctrl", "Option" }, key = "U", message = "Bottom Left Corner" },
	-- Bottom right corner
	bottom_right = { prefix = { "Ctrl", "Option" }, key = "I", message = "Bottom Right Corner" },
	-- **********************************
	-- Left 1/3 (landscape) or top 1/3 (portrait)
	left_1_3 = {
		prefix = { "Ctrl", "Option" },
		key = "Q",
		message = "Left or Top 1/3",
	},
	-- Right 1/3 (landscape) or bottom 1/3 (portrait)
	right_1_3 = {
		prefix = { "Ctrl", "Option" },
		key = "W",
		message = "Right or Bottom 1/3",
	},
	-- Left 2/3 (landscape) or top 2/3 (portrait)
	left_2_3 = {
		prefix = { "Ctrl", "Option" },
		key = "E",
		message = "Left or Top 2/3",
	},
	-- Right 2/3 (landscape) or bottom 2/3 (portrait)
	right_2_3 = {
		prefix = { "Ctrl", "Option" },
		key = "R",
		message = "Right or Bottom 2/3",
	},
}

-- Window operation: move window.
_M.window_movement = {
	-- Move window upward
	to_up = {
		prefix = { "Ctrl", "Option", "Command" },
		key = "K",
		message = "Move Upward",
	},
	-- Move window downward
	to_down = {
		prefix = { "Ctrl", "Option", "Command" },
		key = "J",
		message = "Move Downward",
	},
	-- Move window to the left
	to_left = {
		prefix = { "Ctrl", "Option", "Command" },
		key = "H",
		message = "Move Leftward",
	},
	-- Move window to the right
	to_right = {
		prefix = { "Ctrl", "Option", "Command" },
		key = "L",
		message = "Move Rightward",
	},
}

-- Window operation: change window size
_M.window_resize = {
	-- Maximize
	max = { prefix = { "Ctrl", "Option" }, key = "M", message = "Max Window" },
	-- Proportionally enlarge window
	stretch = { prefix = { "Ctrl", "Option" }, key = "=", message = "Stretch Outward" },
	-- Proportionally shrink window
	shrink = { prefix = { "Ctrl", "Option" }, key = "-", message = "Shrink Inward" },
	-- Stretch bottom edge of window upward
	stretch_up = {
		prefix = { "Ctrl", "Option", "Command", "Shift" },
		key = "K",
		message = "Bottom Side Stretch Upward",
	},
	-- Stretch bottom edge of window downward
	stretch_down = {
		prefix = { "Ctrl", "Option", "Command", "Shift" },
		key = "J",
		message = "Bottom Side Stretch Downward",
	},
	-- Stretch right edge of window to the left
	stretch_left = {
		prefix = { "Ctrl", "Option", "Command", "Shift" },
		key = "H",
		message = "Right Side Stretch Leftward",
	},
	-- Stretch right edge of window to the right
	stretch_right = {
		prefix = { "Ctrl", "Option", "Command", "Shift" },
		key = "L",
		message = "Right Side Stretch Rightward",
	},
}

-- Window management: batch processing
_M.window_batch = {
	-- Minimize all windows.
	minimize_all_windows = {
		prefix = { "Ctrl", "Option", "Command" },
		key = "M",
		message = "Minimize All Windows",
	},
	-- Restore all minimized windows.
	un_minimize_all_windows = {
		prefix = { "Ctrl", "Option", "Command" },
		key = "U",
		message = "Unminimize All Windows",
	},
	-- Close all windows.
	close_all_windows = {
		prefix = { "Ctrl", "Option", "Command" },
		key = "Q",
		message = "Close All Windows",
	},
}

-- Window operation: move to above, below, left, right, or next monitor
_M.window_monitor = {
	to_above_screen = {
		prefix = { "Ctrl", "Option" },
		key = "up",
		message = "Move to Above Monitor",
	},
	to_below_screen = {
		prefix = { "Ctrl", "Option" },
		key = "down",
		message = "Move to Below Monitor",
	},
	to_left_screen = {
		prefix = { "Ctrl", "Option" },
		key = "left",
		message = "Move to Left Monitor",
	},
	to_right_screen = {
		prefix = { "Ctrl", "Option" },
		key = "right",
		message = "Move to Right Monitor",
	},
	to_next_screen = {
		prefix = { "Ctrl", "Option" },
		key = "space", -- If you have few external monitors, just use this.
		message = "Move to Next Monitor",
	},
}

return _M
</file>

</files>
